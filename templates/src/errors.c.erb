#include "errors.h"

<%- errors.each do |error| %>

bool
yp_diagnost_list_append_<%= error.name %>(yp_parser_t *parser, const char *start, const char *end) {
yp_diagnostic_t *diagnostic = (yp_diagnostic_t *) malloc(sizeof(yp_diagnostic_t));
    if (diagnostic == NULL) return false;

    yp_list_t *list = &parser->error_list;
    const char *line_start = (parser->newline_list.start + parser->newline_list.offsets[parser->newline_list.size-1]);

    char *line_end = strchr((char*)line_start, '\n');
    if (line_end == line_start) {
      line_start++;
      line_end = strchr((char*)line_start, '\n');
    }
    
    unsigned long line_size = (unsigned long)((line_end - line_start));
    char * line = malloc(sizeof(char) * (line_size+1));
    memcpy(line, line_start, line_size);
    line[line_size+1] = '\0';

    char * message_buf = malloc(<%= error.string_size %>);
    sprintf(message_buf, "<%= error.template_string %>)", <%= error.template_args %>);

    *diagnostic = (yp_diagnostic_t) {
      .start = start,
      .end = end,
      .message = message_buf,
      .line = line,
      .line_start = line_start,
      .lineno = parser->newline_list.size
    };
    
    yp_list_append(list, (yp_list_node_t *) diagnostic);
    return true;
}

<%- end %>